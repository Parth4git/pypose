import torch
from torch import nn


class PID(nn.Module):
    r"""
    This class is the basic class for all PID controller implementations.
    """
    def __init__(self, parameters, func_compute_error, func_compute_state_diff):
        self.device=parameters.device
        self.integrity_initialized = False
        self.integity = None
        self.parameters = parameters
        self.parameters.requires_grad = True
        self.last_system_state = None
        self.func_compute_error = func_compute_error
        self.func_compute_state_diff = func_compute_state_diff
        pass

    def forward(self, state, ref_state, dt, feed_forward_quantity=None):
        r"""
        Args:
            parameters: controller parameters, e.g. kp, ki, kd in PID controllers.
            state:  current system state of dynamic systems.
            ref_state:  the reference state of systems to reach.
            dt: time interval between last and current function invocation
            feed_forward_quantity: system plant input generated by other feed forward
                controllers.
        """
        error = self.func_compute_error(state, ref_state)
        if not self.integrity_initialized:
            self.integity = torch.zeros_like(error, device=self.device)
            self.last_system_state = state
        
        kp, ki, kd = self.parameters
        
        self.integity += error
        state_diff = self.func_compute_state_diff(self.last_system_state - self.state)

        return kp * error + ki * self.integity + kd * state_diff


    def reset(self):
        r"""
        This method is used to reset the internal state.
        For example, integrated error in PID controller
        """
        if self.integrity_initialized:
            self.integity = None
            self.last_system_state = None
            self.integrity_initialized = False
